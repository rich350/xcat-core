#!/usr/bin/env perl
# IBM(c) 2007 EPL license http://www.eclipse.org/legal/epl-v10.html

# Used as a standard client cmd that can be used for many of the xcat cmds.
# It grabs the arguments, noderange, and stdin and then submits the request to
# xcatd and waits for responses.  Most of the client/server communication is
# contained in Client.pm.

# To use this, sym link your cmd name to this script.

BEGIN { $::XCATROOT = $ENV{'XCATROOT'} ? $ENV{'XCATROOT'} : -d '/opt/xcat' ? '/opt/xcat' : '/usr'; }
use lib "$::XCATROOT/lib/perl";
use Cwd;

#use IO::Socket::SSL;
#use IO::Socket::INET;
use File::Basename;

#use Data::Dumper;
use xCAT::Client;
use strict;
my $bname = basename($0);
my $cmdref;
if ($bname =~ /xcatclient/) { $cmdref->{command}->[0] = shift @ARGV; } # xcatclient was invoked directly and the 1st arg is cmd name that is used to locate the plugin
else { $cmdref->{command}->[0] = $bname; } # the cmd was sym linked to xcatclient
$cmdref->{cwd}->[0] = cwd();

my $data;

# allows our plugins to get the stdin of the cmd that invoked the plugin
if ((($^O =~ /^linux/i) && ($ENV{'SHELL'} =~ /\/ksh$/)) || !defined($ENV{'TERM'}))
{
    my $rin = "";
    my $rout;
    vec($rin, fileno(STDIN), 1) = 1;
    my $nfound = select($rout = $rin, "", "", 1);
    if ($nfound)
    {
        while (<STDIN>) { $data .= $_; }
        $cmdref->{stdin}->[0] = $data;
    }
}
else
{
    if (-p STDIN) {
        while (<STDIN>) { $data .= $_; }
        $cmdref->{stdin}->[0] = $data;
    }
}


my $arg;
my @tmpargv = @ARGV;

# lslite needs to handle imagename besides noderange
# so do not fill {noderange} if imagename given
my $str = join(',', @tmpargv);
if (($bname =~ /lslite/) && $str =~ /-i/)
{
    $arg = "NO_NODE_RANGE";
}
else
{ # Consider the 1st non-hyphen arg to be the noderange.  All others (before and after) go on the arg list.
    $arg = shift(@ARGV);
    while ($arg =~ /^-/) {
        push(@{ $cmdref->{arg} }, $arg);
        $arg = shift(@ARGV);
    }
}

if ($arg ne "NO_NODE_RANGE") {

    # The noderange can be specified through a noderange file,
    # the noderange file can be a relative path,
    # convert the relative path to a full path.
    # an ideal way is converting the relative path in xCAT::Noderange::noderange,
    # but the existing xCAT::Noderange::noderange can not get the cwd(),
    # needs to change all the callers to pass the cwd(),
    # there are more than 100 callers.
    my @tempnr = ();
    foreach my $nr (split(/,/, $arg)) {
        if ($nr =~ /^\^(.*)$/) {
            my $nrf = $1;
            if ($nrf !~ /^\//) {    #relative path
                $nrf = Cwd::abs_path($nrf);
            }
            $nrf = "\^" . $nrf;
            push @tempnr, $nrf;
        } else {
            push @tempnr, $nr;
        }
    }
    $arg = join(',', @tempnr);
    $cmdref->{noderange}->[0] = $arg;
}
if (@ARGV) {
    push(@{ $cmdref->{arg} }, @ARGV);
}
foreach (keys %ENV) {
    if (/^XCAT_/) {
        $cmdref->{environment}->{$_} = $ENV{$_};
    }
}

# Allow to print server information when -V/--verbose
foreach (reverse(@ARGV)) {
    if ($_ eq '-V' || $_ eq '--verbose') {
        $ENV{'XCATSHOWSVR'} = 1;
        last;
    }
}

xCAT::Client::submit_request($cmdref, \&xCAT::Client::handle_response);
exit $xCAT::Client::EXITCODE;
